const baroAiChatApp = {
    template: `
    <div class="baro-panel" :class="{ hidden: !panelVisible }">
      <div class="baro-header">
        <div class="baro-header-left">
          <div class="baro-ai-icon">
            <img :src="logoUrl" alt="AI Logo" class="baro-logo-img">
          </div>
          <div class="baro-header-info">
            <div class="baro-header-title">{{ title }}</div>
            <div class="baro-header-status">
              <span class="baro-status-dot"></span>
              ƒêang ho·∫°t ƒë·ªông
            </div>
          </div>
        </div>
        <div class="baro-header-actions">
          <button class="baro-clear-btn" @click="clearChatHistory" title="X√≥a l·ªãch s·ª≠ chat" v-if="history.length > 0">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <polyline points="3,6 5,6 21,6"></polyline>
              <path d="m19,6v14a2,2 0 0,1 -2,2H7a2,2 0 0,1 -2,-2V6m3,0V4a2,2 0 0,1 2,-2h4a2,2 0 0,1 2,2v2"></path>
            </svg>
          </button>
          <button class="baro-minimize-btn" @click="togglePanel" title="Thu g·ªçn">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <line x1="5" y1="12" x2="19" y2="12"></line>
            </svg>
          </button>
        </div>
      </div>
      <div class="baro-body" ref="body">
        <template v-if="!infoSubmitted">
          <div class="baro-info-form">
            <p><strong>Tr·ª£ l√Ω t∆∞ v·∫•n ChatBot AI</strong></p>
            <p>Vui l√≤ng cung c·∫•p m·ªôt s·ªë th√¥ng tin sau ƒë·ªÉ ch√∫ng t√¥i c√≥ th·ªÉ h·ªó tr·ª£ t·ªët h∆°n.</p>
            <div class="form-group">
              <label for="userName">H·ªç v√† t√™n <span>*</span></label>
              <input id="userName" type="text" v-model="userName" placeholder="H·ªç v√† t√™n">
            </div>
            <div class="form-group">
              <label for="userPhone">S·ªë ƒëi·ªán tho·∫°i <span>*</span></label>
              <input id="userPhone" type="tel" v-model="userPhone" placeholder="S·ªë ƒëi·ªán tho·∫°i">
            </div>
            <div class="form-group">
              <label for="userEmail">Email <span>*</span></label>
              <input id="userEmail" type="email" v-model="userEmail" placeholder="Email">
            </div>
            <button @click="submitInfo" :disabled="isSubmitting">
              <span v-if="isSubmitting">ƒêang g·ª≠i...</span>
              <span v-else>Ti·∫øp t·ª•c</span>
            </button>
            <p v-if="formError" class="error-msg">{{ formError }}</p>
          </div>
        </template>
        <template v-else-if="history.length === 0">
          <div class="baro-welcome">
            <p v-html="'Xin ch√†o ' + userName + '!<br>M√¨nh l√† tr·ª£ l√Ω AI [Th·ª≠ nghi·ªám] t·ª´ <strong>' + brand + '</strong>.'"></p>
          </div>
          <ul class="baro-suggestions">
            <li @click="quickSend('T∆∞ v·∫•n s·∫£n ph·∫©m')">T∆∞ v·∫•n s·∫£n ph·∫©m</li>
            <li @click="quickSend('ChƒÉm s√≥c kh√°ch h√†ng')">ChƒÉm s√≥c kh√°ch h√†ng</li>
            <li @click="quickSend('B·∫£o h√†nh s·∫£n ph·∫©m')">B·∫£o h√†nh s·∫£n ph·∫©m</li>
            <li @click="quickSend('H·ªó tr·ª£ k·ªπ thu·∫≠t')">H·ªó tr·ª£ k·ªπ thu·∫≠t</li>
          </ul>
        </template>
        <template v-else>
          <div v-for="(msg, index) in history" :key="index" class="baro-msg" :class="msg.role">
            <div class="baro-avatar" v-if="msg.role === 'assistant'">
              <div class="baro-avatar-icon">
                <img :src="logoUrl" alt="AI Logo" class="baro-avatar-img">
              </div>
            </div>
            <div class="baro-msg-content">
              <div class="baro-bubble" :class="{ typing: msg.typing }" v-html="msg.html"></div>
              <div v-if="!msg.typing && msg.timestamp" class="baro-msg-status">
                {{ formatTime(msg.timestamp) }}
              </div>
            </div>
            <div class="baro-avatar" v-if="msg.role === 'user'">
              <div class="baro-avatar-icon">üë§</div>
            </div>
          </div>
          <!-- Show suggestions below chat when there are messages -->
          <div class="baro-suggestions-below" v-if="history.length > 0">
            <div class="baro-suggestions-title">G·ª£i √Ω c√¢u h·ªèi:</div>
            <ul class="baro-suggestions">
              <li @click="quickSend('T∆∞ v·∫•n s·∫£n ph·∫©m')">T∆∞ v·∫•n s·∫£n ph·∫©m</li>
              <li @click="quickSend('ChƒÉm s√≥c kh√°ch h√†ng')">ChƒÉm s√≥c kh√°ch h√†ng</li>
              <li @click="quickSend('B·∫£o h√†nh s·∫£n ph·∫©m')">B·∫£o h√†nh s·∫£n ph·∫©m</li>
              <li @click="quickSend('H·ªó tr·ª£ k·ªπ thu·∫≠t')">H·ªó tr·ª£ k·ªπ thu·∫≠t</li>
            </ul>
          </div>
        </template>
      </div>
      <div class="baro-input" v-if="infoSubmitted">
        <input type="text" v-model="newMessage" :placeholder="placeholder" @keydown.enter="sendMessage()">
        <button @click="sendMessage()" class="baro-send-btn" title="G·ª≠i tin nh·∫Øn">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="22" y1="2" x2="11" y2="13"></line>
            <polygon points="22,2 15,22 11,13 2,9 22,2"></polygon>
          </svg>
        </button>
      </div>
      <div class="baro-footer">
      <a href="https://tgs.com.vn" target="_blank" class="baro-footer-link">
        <small>Powered by </small>
        <img :src="primaryLogoUrl" alt="Th·∫ø Gi·ªõi S·ªë" class="baro-footer-logo">
      </a>
      </div>
    </div>
    <!-- Popup Notification -->
    <div class="baro-popup" :class="{ hidden: !showPopup, 'fade-in': showPopup }" v-if="showPopup">
      <div class="baro-popup-content">
        <div class="baro-popup-close" @click="hidePopup">√ó</div>
        <div class="baro-popup-logo">
          <img :src="logoUrl" alt="AI Logo" class="baro-popup-logo-img">
        </div>
        <div class="baro-popup-text">
          <div class="baro-popup-greeting">
            <div class="baro-slide-container">
              <transition name="slide-up" mode="out-in">
                <div :key="currentGreeting" class="baro-slide-text">{{ currentGreeting }}</div>
              </transition>
            </div>
          </div>
          <div class="baro-popup-message">
            <div class="baro-slide-container">
              <transition name="slide-up" mode="out-in">
                <div :key="currentMessage" class="baro-slide-text">{{ currentMessage }}</div>
              </transition>
            </div>
          </div>
        </div>
      </div>
      <div class="baro-popup-arrow"></div>
    </div>
    
    <button class="baro-fab" :title="'Chat v·ªõi ' + brand" @click="togglePanel">
      <span class="baro-fab-pulse"></span>
      ü§ñ
    </button>
  `,
    data() {
        return {
            panelVisible: false,
            title: 'T∆∞ v·∫•n nhanh',
            placeholder: 'Nh·∫≠p c√¢u h·ªèi...',
            brand: 'Brand',
            history: [], // { role: 'user' | 'assistant', html: '...', typing: bool, timestamp: number }
            newMessage: '',
            apiConfig: window.BARO_AI_CFG || {},
            infoSubmitted: false,
            userName: '',
            userPhone: '',
            userEmail: '',
            formError: '',
            isSubmitting: false,
            logoUrl: '',
            primaryLogoUrl: '',
            showPopup: true,
            popupGreeting: 'Xin ch√†o anh ch·ªã ƒë√£ quan t√¢m t·ªõi Th·∫ø Gi·ªõi S·ªë!',
            popupMessage: 'Em c√≥ th·ªÉ gi√∫p g√¨ cho Anh/Ch·ªã ·∫°?',
            currentGreeting: 'Xin ch√†o anh ch·ªã ƒë√£ quan t√¢m t·ªõi Th·∫ø Gi·ªõi S·ªë!',
            currentMessage: 'Em c√≥ th·ªÉ gi√∫p g√¨ cho Anh/Ch·ªã ·∫°?',
            slideInterval: null,
            popupQuestions: [],
        }
    },
    mounted() {
        const rootEl = this.$el.parentElement
        if (rootEl) {
            this.title = rootEl.dataset.title || this.title
            this.placeholder = rootEl.dataset.placeholder || this.placeholder
            this.brand = rootEl.dataset.brand || this.brand
        }
        this.logoUrl = this.getLogoUrl()
        this.primaryLogoUrl = this.getPrimaryLogoUrl()
        this.loadChatHistory()

        // Load popup content from config
        if (this.apiConfig.popupGreeting) {
            this.popupGreeting = this.apiConfig.popupGreeting
            this.currentGreeting = this.apiConfig.popupGreeting
        }
        if (this.apiConfig.popupMessage) {
            this.popupMessage = this.apiConfig.popupMessage
            this.currentMessage = this.apiConfig.popupMessage
        }

        // Load popup questions from config
        if (this.apiConfig.popupQuestions) {
            this.popupQuestions = this.apiConfig.popupQuestions
                .split('\n')
                .map((q) => q.trim())
                .filter((q) => q.length > 0)
        }

        // Start slide animation
        this.startSlideAnimation()
    },
    beforeUnmount() {
        this.stopSlideAnimation()
    },
    methods: {
        getLogoUrl() {
            // Get the plugin URL from the global config or construct it
            const pluginUrl = window.BARO_AI_CFG?.pluginUrl || '/wp-content/plugins/baro-ai-chatbot'
            return `${pluginUrl}/assets/images/logo_bubble.png`
        },
        getPrimaryLogoUrl() {
            // Get the plugin URL from the global config or construct it
            const pluginUrl = window.BARO_AI_CFG?.pluginUrl || '/wp-content/plugins/baro-ai-chatbot'
            return `${pluginUrl}/assets/images/logo_primary.png`
        },
        togglePanel() {
            this.panelVisible = !this.panelVisible
            // Hide popup when opening chat, show popup when minimizing
            if (this.panelVisible) {
                this.hidePopup()
            } else {
                // Show popup with fade in effect when minimizing
                setTimeout(() => {
                    this.showPopupWithFadeIn()
                }, 300) // Wait for panel close animation
            }
        },
        hidePopup() {
            this.showPopup = false
            this.stopSlideAnimation()
        },
        showPopupWithFadeIn() {
            this.showPopup = true
            this.startSlideAnimation()
        },
        startSlideAnimation() {
            // Use questions from admin or fallback to default
            const questions =
                this.popupQuestions.length > 0
                    ? this.popupQuestions
                    : [
                          this.popupGreeting,
                          'Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Th·∫ø Gi·ªõi S·ªë!',
                          'Xin ch√†o! T√¥i c√≥ th·ªÉ h·ªó tr·ª£ g√¨ cho b·∫°n?',
                          'Ch√†o b·∫°n! H√£y ƒë·ªÉ t√¥i gi√∫p ƒë·ª° nh√©!',
                          'B·∫°n c·∫ßn t∆∞ v·∫•n v·ªÅ d·ªãch v·ª• n√†o?',
                          'T√¥i s·∫µn s√†ng tr·∫£ l·ªùi m·ªçi c√¢u h·ªèi!',
                          'H√£y cho t√¥i bi·∫øt b·∫°n quan t√¢m g√¨ nh√©!',
                      ]

            let currentIndex = 0

            this.slideInterval = setInterval(() => {
                if (!this.showPopup) return

                currentIndex = (currentIndex + 1) % questions.length
                this.currentGreeting = questions[currentIndex]
                this.currentMessage = this.popupMessage // Keep message static
            }, 4000) // Change every 4 seconds
        },
        stopSlideAnimation() {
            if (this.slideInterval) {
                clearInterval(this.slideInterval)
                this.slideInterval = null
            }
        },
        quickSend(message) {
            this.newMessage = message
            this.sendMessage()
        },
        async submitInfo() {
            this.formError = ''
            this.isSubmitting = true

            if (!this.userName.trim() || !this.userPhone.trim() || !this.userEmail.trim()) {
                this.formError = 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß h·ªç t√™n, s·ªë ƒëi·ªán tho·∫°i v√† email.'
                this.isSubmitting = false
                return
            }
            // Basic phone validation
            if (!/^\d{10}$/.test(this.userPhone)) {
                this.formError = 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá (y√™u c·∫ßu 10 s·ªë).'
                this.isSubmitting = false
                return
            }
            // Basic email validation
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
            if (!emailRegex.test(this.userEmail)) {
                this.formError = 'Email kh√¥ng h·ª£p l·ªá.'
                this.isSubmitting = false
                return
            }

            // Send form data to backend without showing in chat
            try {
                const res = await fetch(this.apiConfig.restBase + 'chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-WP-Nonce': this.apiConfig.nonce,
                    },
                    body: JSON.stringify({
                        message: `T√™n: ${this.userName}, SƒêT: ${this.userPhone}, Email: ${this.userEmail}`,
                        is_form_submission: true,
                        current_page_url: window.location.href,
                    }),
                })

                if (res.ok) {
                    this.infoSubmitted = true

                    // T·∫°o welcome message v·ªõi link ƒëƒÉng ·ª©ng
                    let welcomeMessage = `Xin ch√†o <strong>${this.userName}</strong>! üëã<br><br>M√¨nh l√† tr·ª£ l√Ω AI t·ª´ <strong>${this.brand}</strong>. B·∫°n c√≥ th·ªÉ h·ªèi m√¨nh b·∫•t k·ª≥ c√¢u h·ªèi n√†o v·ªÅ s·∫£n ph·∫©m v√† d·ªãch v·ª• nh√©!`

                    // Th√™m link ƒëƒÉng ·ª©ng n·∫øu c√≥ trong config
                    if (this.apiConfig.registrationLink) {
                        welcomeMessage += `<br><br>üîó <strong>Link ƒëƒÉng ·ª©ng:</strong> <a href="${this.apiConfig.registrationLink}" target="_blank" style="color: #007cba; text-decoration: underline;">${this.apiConfig.registrationLink}</a>`
                    }

                    this.history.push({
                        role: 'assistant',
                        html: welcomeMessage,
                        timestamp: Date.now(),
                    })

                    // X√≥a payload (d·ªØ li·ªáu form) sau khi g·ª≠i th√†nh c√¥ng
                    this.userName = ''
                    this.userPhone = ''
                    this.userEmail = ''

                    this.saveChatHistory()
                } else {
                    this.formError = 'C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i.'
                }
            } catch (e) {
                this.formError = 'C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i.'
            } finally {
                this.isSubmitting = false
            }
        },
        async sendMessage(initialMessage = '') {
            // Handle case where no parameter is passed (manual input)
            const text = initialMessage || this.newMessage.trim()
            if (!text) return

            // Add user message to history for display
            this.history.push({ role: 'user', html: text, timestamp: Date.now() })
            this.newMessage = ''
            this.scrollToBottom()

            // Add typing indicator
            this.history.push({ role: 'assistant', html: 'ƒêang g√µ‚Ä¶', typing: true })
            this.scrollToBottom()

            try {
                // Build API history from all non-typing messages (excluding the current user message)
                const apiHistory = this.history
                    .filter((m) => !m.typing && m.role === 'assistant')
                    .map((m) => ({
                        role: 'model',
                        parts: [{ text: this.stripHtml(m.html) }],
                    }))

                const res = await fetch(this.apiConfig.restBase + 'chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-WP-Nonce': this.apiConfig.nonce,
                    },
                    body: JSON.stringify({ message: text, history: apiHistory }),
                })

                // Remove typing indicator
                this.history = this.history.filter((m) => !m.typing)

                if (!res.ok) {
                    let err = 'H·ªá th·ªëng ƒëang b·∫≠n, vui l√≤ng th·ª≠ l·∫°i.'
                    try {
                        const j = await res.json()
                        if (j && j.error) err = j.error
                    } catch {}
                    this.history.push({ role: 'assistant', html: err, timestamp: Date.now() })
                    this.saveChatHistory()
                    return
                }

                const data = await res.json()
                const answer = (data.answer || '').trim()

                this.history.push({
                    role: 'assistant',
                    html: answer || 'Xin l·ªói, hi·ªán m√¨nh ch∆∞a c√≥ th√¥ng tin trong h·ªá th·ªëng.',
                    timestamp: Date.now(),
                })
                this.scrollToBottom()
                this.saveChatHistory()
            } catch (e) {
                // Remove typing indicator and show error
                this.history = this.history.filter((m) => !m.typing)
                this.history.push({
                    role: 'assistant',
                    html: 'K·∫øt n·ªëi l·ªói. Vui l√≤ng th·ª≠ l·∫°i.',
                    timestamp: Date.now(),
                })
                this.saveChatHistory()
            }
        },
        scrollToBottom() {
            this.$nextTick(() => {
                const body = this.$refs.body
                if (body) {
                    body.scrollTop = body.scrollHeight
                }
            })
        },
        stripHtml(html) {
            const tmp = document.createElement('DIV')
            tmp.innerHTML = html
            return tmp.textContent || tmp.innerText || ''
        },
        // LocalStorage methods
        saveChatHistory() {
            try {
                const chatData = {
                    history: this.history.filter((msg) => !msg.typing), // Don't save typing indicators
                    // Kh√¥ng l∆∞u d·ªØ li·ªáu form sau khi ƒë√£ submit ƒë·ªÉ b·∫£o m·∫≠t
                    userName: this.infoSubmitted ? '' : this.userName,
                    userPhone: this.infoSubmitted ? '' : this.userPhone,
                    userEmail: this.infoSubmitted ? '' : this.userEmail,
                    infoSubmitted: this.infoSubmitted,
                    timestamp: Date.now(),
                }
                localStorage.setItem('baro_ai_chat_history', JSON.stringify(chatData))
            } catch (e) {
                console.warn('Could not save chat history to localStorage:', e)
            }
        },
        loadChatHistory() {
            try {
                const saved = localStorage.getItem('baro_ai_chat_history')
                if (saved) {
                    const chatData = JSON.parse(saved)
                    // Only load if data is less than 7 days old
                    if (
                        chatData.timestamp &&
                        Date.now() - chatData.timestamp < 7 * 24 * 60 * 60 * 1000
                    ) {
                        this.history = chatData.history || []
                        this.userName = chatData.userName || ''
                        this.userPhone = chatData.userPhone || ''
                        this.userEmail = chatData.userEmail || ''
                        this.infoSubmitted = chatData.infoSubmitted || false
                    }
                }
            } catch (e) {
                console.warn('Could not load chat history from localStorage:', e)
            }
        },
        clearChatHistory() {
            try {
                localStorage.removeItem('baro_ai_chat_history')
                this.history = []
                this.infoSubmitted = false
                this.userName = ''
                this.userPhone = ''
                this.userEmail = ''
                this.isSubmitting = false
            } catch (e) {
                console.warn('Could not clear chat history from localStorage:', e)
            }
        },
        // Time formatting
        formatTime(timestamp) {
            if (!timestamp) return ''

            const now = Date.now()
            const diff = now - timestamp

            // Less than 1 minute
            if (diff < 60000) {
                return 'V·ª´a xong'
            }

            // Less than 1 hour
            if (diff < 3600000) {
                const minutes = Math.floor(diff / 60000)
                return `${minutes} ph√∫t tr∆∞·ªõc`
            }

            // Less than 24 hours
            if (diff < 86400000) {
                const hours = Math.floor(diff / 3600000)
                return `${hours} gi·ªù tr∆∞·ªõc`
            }

            // More than 24 hours - show date
            const date = new Date(timestamp)
            const today = new Date()
            const yesterday = new Date(today)
            yesterday.setDate(yesterday.getDate() - 1)

            if (date.toDateString() === today.toDateString()) {
                return `H√¥m nay ${date.toLocaleTimeString('vi-VN', {
                    hour: '2-digit',
                    minute: '2-digit',
                })}`
            } else if (date.toDateString() === yesterday.toDateString()) {
                return `H√¥m qua ${date.toLocaleTimeString('vi-VN', {
                    hour: '2-digit',
                    minute: '2-digit',
                })}`
            } else {
                return date.toLocaleDateString('vi-VN', {
                    day: '2-digit',
                    month: '2-digit',
                    year: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit',
                })
            }
        },
    },
}

document.addEventListener('DOMContentLoaded', () => {
  const root = document.getElementById('baro-ai-root');
  if (root) {
    Vue.createApp(baroAiChatApp).mount(root);
  }
});